{"version":3,"file":"static/js/321.d852e2fd.chunk.js","mappings":"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","sources":["services/castRequest.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["const API_KEY =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4YzFjMjFjYjNkZTBmMzFmY2NlMmNjZTA0OWUyYzcwYyIsInN1YiI6IjY1NzQ5MGJjYmJlMWRkMDBjNDBjMDZjYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.rk4ZGNCrWJDYlG9ojpZ-K-JQ1AKu7JU3Ol7o96eB5z8';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst castRequest = async ({ id }) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}movie/${id}/credits?language=en-US`,\n      {\n        headers: {\n          Authorization: `Bearer ${API_KEY}`,\n        },\n      }\n    );\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport default castRequest;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  margin-bottom: 10px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport castRequest from 'services/castRequest';\nimport { Item } from './Cast.styled';\nfunction Cast() {\n  const [data, setData] = useState([]);\n  const { id } = useParams();\n  useEffect(() => {\n    const fetchRequest = async () => {\n      try {\n        if (id) {\n          const { cast } = await castRequest({\n            id,\n          });\n          const formattedDate = cast.map(\n            ({ original_name, character, profile_path, id }) => ({\n              ids: id,\n              name: original_name,\n              character: character,\n              profile_path: profile_path,\n            })\n          );\n          setData(formattedDate);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchRequest();\n  }, [id]);\n  return (\n    <>\n      {data.length > 0 && (\n        <ul>\n          {data.map(({ name, ids, character, profile_path }) => (\n            <Item key={ids}>\n              <img\n                src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                alt={name}\n              />\n              <p>{name}</p>\n              <p>Character: {character} </p>\n            </Item>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["castRequest","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_ref","id","response","data","_context","prev","next","fetch","concat","headers","Authorization","sent","ok","Error","statusText","json","abrupt","t0","console","error","stop","_x","apply","arguments","Item","styled","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","setData","useParams","useEffect","fetchRequest","_yield$castRequest","cast","formattedDate","map","original_name","character","profile_path","ids","name","_jsx","_Fragment","children","length","_ref3","_jsxs","src","alt","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","fn","self","this","args","err","undefined"],"sourceRoot":""}